# -*- coding: utf-8 -*-
"""Mr Clives RA CA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mXVmnKC1TUS9Sacm8yGx4aGPT8INxUxS
"""

# Write a program in Python to prompt the user to input their name, employee number, week
# ending date, hours worked, rate per hour, standard and overtime tax percentage rate. Use the
# data input to calculate gross pay, tax deductions and net pay. Output the results as a
# formatted payslip. Assume that a standard working week is 37.5 hours.
# E.g. Ask the user to enter the following data:
# Employee Name:
# Employee Number:
# Week ending:
# Number of hours worked:
# Hourly Rate:
# Overtime Rate:
# Standard Tax Rate:
# Overtime Tax Rate:
# (sample input – Mark Bate)
# (sample input – 123456789A)
# (sample input - 26/01/2018)
# (sample input – 42.5)
# (sample input – 10.50)
# (time-and-a-half as 1.5)
# (sample input – 20)
# (sample input – 50)



 # prompt the user to input the data
name = input("Employee Name: ")
employee_num = input("Employee Number: ")
week_ending = input("Week ending: ")
hours_worked = float(input("Number of hours worked: "))
hourly_rate = float(input("Hourly Rate: "))
overtime_rate = float(input("Overtime Rate (time-and-a-half): "))
standard_tax_rate = float(input("Standard Tax Rate (%): ")) / 100
overtime_tax_rate = float(input("Overtime Tax Rate (%): ")) / 100

# calculate the gross pay
normal_hours = min(hours_worked, 37.5)
overtime_hours = max(hours_worked - 37.5, 0)
normal_pay = normal_hours * hourly_rate
overtime_pay = overtime_hours * overtime_rate
gross_pay = normal_pay + overtime_pay

# calculate the tax deductions
normal_tax = normal_pay * standard_tax_rate
overtime_tax = overtime_pay * overtime_tax_rate
total_tax = normal_tax + overtime_tax

# calculate the net pay
net_pay = gross_pay - total_tax

# generate the payslip
print("PAYSLIP")
print("WEEK ENDING", week_ending)
print("Employee:", name)
print("Employee Number:", employee_num)
print("Earnings\Deductions")
print("Hours\Rate\Total")
print("Hours (normal)\t{:.2f}\t{:.2f}".format(normal_hours, hourly_rate, normal_pay))
print("Hours (overtime)\t{:.2f}\t{:.2f}".format(overtime_hours, overtime_rate, overtime_pay))
print("Total pay:\t{:.2f}".format(gross_pay))
print("Tax @ {:.0%}:\t{:.2f}".format(standard_tax_rate, normal_tax))
print("Tax @ {:.0%}:\t{:.2f}".format(overtime_tax_rate, overtime_tax))
print("Total deductions:\t{:.2f}".format(total_tax))
print("Net pay:\t{:.2f}".format(net_pay))

# Write a program in Python which prompts the user for their username in the format Domain
# Name\Username as per Figure 1a below.
# Figure 1a.
# On entering their domain and username and pressing carriage return, write out to the console
# window each individual data item as per Figure 1b below.
# Figure 1b.
# NOTE: The user can enter any combination of domain and username.



print("WELCOME TO DBS CONSOLE")

# prompt the user to enter their username
username = input("Please enter your username: ")

# extract the domain and username from the input string
domain, username = username.split("\\")

# output the domain and username
print("Domain:", domain)
print("Username:", username)

# Write a program in Python that prompts the user to enter a number of integer values. The
# program stores the integers, counts the frequency of each integer and displays the frequency
# as per Figure 2 below.



print("WELCOME TO DBS CONSOLE")

# prompt the user to enter integer values
values = input("Enter five elements: ")

# convert the input string to a list of integers
values = list(map(int, values.split()))

# count the frequency of each integer
freq = {}
for val in values:
    if val in freq:
        freq[val] += 1
    else:
        freq[val] = 1

# display the frequency of each integer
print("Integers : Frequency:")
for val in sorted(freq):
    print(val, ":", freq[val])

# Implement the MYPY Phone Book System in Python as per Figure 3 below which allows
# users to add, delete, update and lookup phone numbers. The MYPY Phone Book System
# should store the individual’s Full Name and Phone Number. Your program should not allow
# users to add the same number twice. On adding, deleting, updating or looking up a number,
# your program should let the user know if the operation was successful or not. On looking up
# a number return the full name and number of the individual; if the number is not found give
# the user the option to add the details they are looking up. The user can perform multiple
# actions; they can add a new entry and subsequently delete an entry without having to stop and
# start the program until they decide to quit.




# define the phone book as a dictionary
phone_book = {}

# function to add a phone number
def add_number():
    # prompt the user for the full name and phone number
    name = input("Enter full name: ")
    number = input("Enter phone number: ")

    # check if the phone number already exists in the phone book
    if number in phone_book.values():
        print("Error: phone number already exists.")
    else:
        # add the full name and phone number to the phone book
        phone_book[name] = number
        print("Phone number added successfully.")

# function to delete a phone number
def delete_number():
    # prompt the user for the phone number to delete
    number = input("Enter phone number to delete: ")

    # check if the phone number exists in the phone book
    if number in phone_book.values():
        # remove the entry with the given phone number
        for name, phone in phone_book.items():
            if phone == number:
                del phone_book[name]
                break
        print("Phone number deleted successfully.")
    else:
        print("Error: phone number not found.")

# function to update a phone number
def update_number():
    # prompt the user for the full name and new phone number
    name = input("Enter full name: ")
    number = input("Enter new phone number: ")

    # check if the full name exists in the phone book
    if name in phone_book:
        # check if the new phone number already exists in the phone book
        if number in phone_book.values():
            print("Error: phone number already exists.")
        else:
            # update the phone number for the given full name
            phone_book[name] = number
            print("Phone number updated successfully.")
    else:
        print("Error: full name not found.")

# function to lookup a phone number
def lookup_number():
    # prompt the user for the phone number to lookup
    number = input("Enter phone number to lookup: ")

    # check if the phone number exists in the phone book
    if number in phone_book.values():
        # find the full name for the given phone number
        for name, phone in phone_book.items():
            if phone == number:
                print("Name:", name)
                print("Phone number:", phone)
                return
    else:
        # ask the user if they want to add the phone number
        choice = input("Phone number not found. Add it? (y/n): ")
        if choice.lower() == 'y':
            # prompt the user for the full name and add the phone number
            name = input("Enter full name: ")
            number = input("Enter phone number: ")
            phone_book[name] = number
            print("Phone number added successfully.")

# main program loop
while True:
    # display the menu options
    print("MYPY Phone Book System")
    print("1. Add a phone number")
    print("2. Delete a phone number")
    print("3. Update a phone number")
    print("4. Lookup a phone number")
    print("5. Quit")

    # prompt the user for their choice
    choice = input("Enter your choice: ")

    # perform the selected action
    if choice == '1':
        add_number()
    elif choice == '2':
        delete_number()
    elif choice == '3':
        update_number()
    elif choice == '4':
        lookup_number()
    elif choice == '5':
        # exit the program
        break
    else:
        print("Error: invalid choice.")